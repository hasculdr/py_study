# -*- coding: utf-8 -*-
'''
Задание 15.1b

Проверить работу функции get_ip_from_cfg из задания 15.1a на конфигурации config_r2.txt.

Обратите внимание, что на интерфейсе e0/1 назначены два IP-адреса:
interface Ethernet0/1
 ip address 10.255.2.2 255.255.255.0
 ip address 10.254.2.2 255.255.255.0 secondary

А в словаре, который возвращает функция get_ip_from_cfg, интерфейсу Ethernet0/1
соответствует только один из них (второй).

Скопировать функцию get_ip_from_cfg из задания 15.1a и переделать ее таким образом, чтобы она возвращала список кортежей для каждого интерфейса.
Если на интерфейсе назначен только один адрес, в списке будет один кортеж.
Если же на интерфейсе настроены несколько IP-адресов, то в списке будет несколько кортежей.

Проверьте функцию на конфигурации config_r2.txt и убедитесь, что интерфейсу
Ethernet0/1 соответствует список из двух кортежей.

Обратите внимание, что в данном случае, можно не проверять корректность IP-адреса,
диапазоны адресов и так далее, так как обрабатывается вывод команды, а не ввод пользователя.

'''
import re
def get_ip_from_cfg(config):
	with open(config, 'r') as config_file:
		data = config_file.read()
		regex = (r'interface (\S+)\n'#сохраняем имя интерфейса
				r'(?: .+?\n)*?'#не_сохраняем возможные команды (встречаются 0 и более раз),
				r'(?: ip address (\d+\.\d+\.\d+\.\d+) (\d+\.\d+\.\d+\.\d+).*?\n)'#кроме группировок из команд, начинающихся с "ip address"
				r'(?: ip address (\d+\.\d+\.\d+\.\d+) (\d+\.\d+\.\d+\.\d+).*?\n)?')#костыль на один secondary-адрес
		tuple_list = re.findall(regex, data)
		output_dict = {}
		for elem in tuple_list:
			if '' in elem:
				output_dict[elem[0]] = [(elem[1], elem[2])]
			else:
				output_dict[elem[0]] = [(elem[1], elem[2]), (elem[3], elem[4])]
		return(output_dict)
		#return(tuple_list)
if __name__ == "__main__":
	print(get_ip_from_cfg('config_r2.txt'))
